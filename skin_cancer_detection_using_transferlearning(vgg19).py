# -*- coding: utf-8 -*-
"""Skin Cancer Detection using TransferLearning(VGG19)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zqQ9nuyxjgaKl8K5GigfX8uPWffRyw99
"""



#from google.colab import drive
#drive.mount('/content/drive')



#importing important libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

#from PIL import image
from glob import glob
import tensorflow

#converting lables to one-hot encoding
from keras.utils.np_utils import to_categorical
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Dense, Flatten, MaxPool2D,Activation,ReLU,Conv2D,Dropout,Embedding

from tensorflow.keras.layers  import BatchNormalization
from tensorflow.keras.optimizers import RMSprop,Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.applications.vgg19 import preprocess_input
from tensorflow.keras.applications.inception_v3 import InceptionV3

IMAGE_SIZE = [224,224]
train_path = "/content/drive/My Drive/skin_cancer/skin_cancer_detection/train"
test_path = "/content/drive/My Drive/skin_cancer/skin_cancer_detection/test"

#here we are using imagenet weights
vgg = VGG19(input_shape=  IMAGE_SIZE + [3], weights= 'imagenet', include_top= False)

#Here we don't train existing weights
for layer in vgg.layers:
  layer.trainable = False

"""#### Remember that we are removing first and last layers bcoz at first layer we are givn new image size and at last layer we are giving 2 classes."""

#we can see that first layer we are given new image size and last layer is not there as it is cut at flatten layer.
vgg.summary()

#here glob method useful for getting number of output classes.
folders = glob("/content/drive/My Drive/skin_cancer/skin_cancer_detection/train/*")

folders

x  = Flatten()(vgg.output)

#now we are adding output layer with len(folders)
prediction = Dense(len(folders), activation= 'sigmoid')(x)

#create model object
model = Model(inputs = vgg.input, outputs = prediction)

model.summary()

#Now we compile the model
model.compile( loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])

#Now we do image augementation using ImageDataGenerator library
train_datagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)
test_datagen = ImageDataGenerator(rescale = 1./255)

"""#### Note that we provide same target size as initialized for the image size."""

training_set = train_datagen.flow_from_directory("/content/drive/My Drive/skin_cancer/skin_cancer_detection/train", target_size = (224, 224), batch_size = 32, class_mode = 'categorical')
test_set = test_datagen.flow_from_directory("/content/drive/My Drive/skin_cancer/skin_cancer_detection/test", target_size = (224, 224), batch_size = 32, class_mode = 'categorical')

"""#### Now we fit the mode and remember that it will take time to execute."""

result = model.fit_generator(training_set, validation_data = test_set, epochs = 30, steps_per_epoch = len(training_set), validation_steps = len(test_set))

"""##### We can see that we get better accuracy for training data 85% and validation accuracy is 84%.

"""

# plot the loss
plt.plot(result.history['loss'], label='train loss')
plt.plot(result.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(result.history['accuracy'], label='train acc')
plt.plot(result.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

from tensorflow.keras.models import load_model
model.save("skin_cancer_model_vgg19.h5")

y_pred = model.predict(test_set)

import numpy as np
y_pred = np.argmax(y_pred, axis = 1)
y_pred

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

model = load_model('skin_cancer_model_vgg19.h5')

img = image.load_img("/content/drive/My Drive/skin_cancer/skin_cancer_detection/test/malignant/1218.jpg", target_size = (224,224))

x = image.img_to_array(img)
x

x.shape

x = x / 255

x = np.expand_dims(x, axis = 0)
img_data = preprocess_input(x)
img_data.shape

img_data

model.predict(img_data)

a = np.argmax(model.predict(img_data), axis = 1)

"""#### We correctly predicted malignant cancer."""

a

a == 1



























